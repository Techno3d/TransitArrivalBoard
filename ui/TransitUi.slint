export struct BusInfo {
    name: string,
    uptown: string,
    downtown: string,
    uptown-times: [int],
    downtown-times: [int],
}

export struct BusStopInfo {
    stop-name: string,
    busses: [BusInfo],
}

component Stop {
    in property <BusStopInfo> stop-info;
    in property <float> scale: 1.0;
    property <length> relative: 14px;
    VerticalLayout {
        alignment: start;
        spacing: 0px;
        padding: 0px;
        HorizontalLayout {
            alignment: center;
            Text {
                text: stop-info.stop-name;
                font-size: relative*3*scale;
                font-weight: 900;
            }
        }

        for bus in stop-info.busses : Rectangle {
            VerticalLayout {
                HorizontalLayout {
                    alignment: center;
                    Rectangle {
                        border-color: #3c7cea;
                        border-width: relative*0.2*scale;
                        border-radius: 10px;
                        width: 300px;
                        Text {
                            text: bus.name;
                            font-size: relative*2*scale;
                        }
                    }
                }
                HorizontalLayout {
                    alignment: center;
                    Rectangle {
                        background: red;
                        height: relative*0.4*scale;
                        width: 300px;
                    }
                }
                HorizontalLayout {
                    alignment: center;
                    spacing: relative*scale;
                    VerticalLayout {
                        Text {
                            text: bus.uptown;
                            font-size: relative*2*scale;
                        }
                        for time in bus.uptown-times : HorizontalLayout {
                            alignment: end;
                            Rectangle {
                                background: #eaeaea;
                                width: 120px;
                                Text {
                                    font-size: relative*2.1*scale;
                                    text: time + " mins";
                                    font-weight: 900;
                                    //color: white;
                                }
                            }
                        }
                    }
                    if bus.uptown-times.length != 0 && bus.downtown-times.length != 0 : HorizontalLayout {
                        alignment: center;
                        Rectangle {
                            width: 5%;
                        }
                        Rectangle {
                            background: black;
                            width: 4px;
                        }
                        Rectangle {
                            width: 5%;
                        }
                    }
                    VerticalLayout {
                        HorizontalLayout {
                            alignment: center;
                            Text {
                                text: bus.downtown;
                                font-size: relative*2*scale;
                            }
                        }
                        for time in bus.downtown-times : HorizontalLayout {
                            alignment: bus.uptown-times.length == 0 ? center : start;
                            Rectangle {
                                background: #eaeaea;
                                width: 120px;
                                height: relative*2.5*scale;
                                Text {
                                    //color: white;
                                    text: time + " mins";
                                    font-size: relative*2*scale;
                                    font-weight: 900;
                                }
                            }
                        }
                    }
                }
                Rectangle {
                    height: relative*2*scale;
                }
            }
        }
    }
}

export struct TrainInfo {
    route-name: string,
    color: brush,
    times: [int],
}

export struct StationInfo {
    station-name: string,
    trains: [TrainInfo],
    walk-time: int,
    delay: int,
}

component ArrivalLine {
    in property <string> train-name;
    in property <[int]> arrival-times;
    in property <brush> bg-color;
    in property <int> walk-time;
    in property <int> delay;
    HorizontalLayout {
        Rectangle {
            width: 10px;
        }
       line := Rectangle {
            background: bg-color;
            width: parent.width * 0.08;
            height: parent.width * 0.08;
            Text {
                font-size: parent.height*0.381;
                font-weight: 400;
                color: white;
                text: " (" + train-name + ")\n[SB]";
                horizontal-alignment: center;
            }
       } 
       for arrivaltime in arrival-times: HorizontalLayout {
            Rectangle {
                height: line.height;
                width: line.width;
                background: #eaeaea;
                Text {
                    font-size: parent.height*0.4;
                    text: arrivaltime;
                    font-weight: 400;
                }
                Rectangle {
                    height: 100%;
                    width: 100%;
                    background: arrivaltime < walk-time ? #f73d2c55 : #f73d2c00;
                }
            }
            Rectangle {
                background: grey;
                width: 4px;
                //height: 105px;
            }
        }
        HorizontalLayout {
            alignment: end;
            if delay >= 22 && delay <= 26 : Rectangle {
                background: #f73d2c55;
                Text {
                    text: "Delays";
                    font-weight: 900;
                    font-size: line.height*0.381;
                }
            }
            if delay > 26 : Rectangle {
                background: #f73d2c55;
                Text {
                    text: "Severe\nDelays";
                    font-weight: 900;
                    font-size: line.height*0.381;
                }
            }
            Rectangle {
               width: line.width;
               height: line.height;
            }
            VerticalLayout {
                alignment: center;
                Text {
                    text: "Avg. Walk Time";
                    font-size: line.height*0.1;
                    font-weight: 500;
                }
                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: walk-time;
                        font-size: line.height*0.4;
                    }
                }
            }
            Rectangle {
               width: line.width;
               height: line.height;
            }
        }
    }
}

export component ArrivalBoard inherits Window {
    in property <[StationInfo]> inp;
    in property <[BusStopInfo]> businp;
    in property <float> scale;
    no-frame: true;

    VerticalLayout {
        alignment: start;
        HorizontalLayout {
            alignment: center;
            Text {
                text: "Transit Board";
                font-size: 40px*scale;
                font-weight: 600;
            }
        }
        for station in inp: VerticalLayout {
            Rectangle {
                width: 100%;
                height: 40px;
            }
            Text {
                text: station.station-name;
                font-size: 30px*scale;
                horizontal-alignment: center;
                font-weight: 500;
            }
            for train in station.trains: ArrivalLine {
                bg-color: train.color;
                train-name: train.route-name;
                arrival-times: train.times;
                walk-time: station.walk-time;
                delay: station.delay;
            }
            Rectangle {
                width: 100%;
                height: 40px;
            }
        }
        HorizontalLayout {
            alignment: center;
            for stop in businp : HorizontalLayout {
                Stop {
                    stop-info: stop;
                    scale: scale;
                }
                Rectangle {
                    width: 100px;
                }
            }
        }
    }
    VerticalLayout {
        alignment: end;
        Text {
            text: "Made with ❤️ by Transit Club";
            font-size: 20px*scale;
        }
    }
}
